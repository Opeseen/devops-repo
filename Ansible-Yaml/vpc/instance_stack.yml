- name: Setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Setup Variables
      include_vars: vpc_variables.yml

    - name: Import VPC Stack Output Variables
      include_vars: vpc_output_vars.yml
    
    - name: Import AMI Variables
      include_vars: ami_vars.yml

    - name: Create Vprofile EC2 key
      ec2_key:
        name: sample
        region: "{{region}}"
      register: keyout

    - debug:
        var: keyout

    - name: Store Login Key For Instance
      copy:
        content: "{{keyout.key.private_key}}"
        dest: ./sample_key.pem
        mode: 0600
      when: keyout.changed

    - name: Create SG for Load balancer
      ec2_group:
        name: vproELB_SG
        description: Allow 80 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
        tags:
          Name: vproELB
      register: vproELB_out

    - name: Create SG for Instance host
      ec2_group:
        name: BastionSG
        description: Allow 22 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELB_out.group_id}}"
            rule_desc: allow HTTP from Load balancer
        tags:
          Name: BastionSG
      register: BastionSG_out

    - name: Update SG to allow traffic from itself
      ec2_group:
        name: BastionSG
        description: Allow traffic from itself
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false
        rules:
          - proto: all
            group_id: "{{BastionSG_out.group_id}}"
            rule_desc: Allow traffic from within

    - name: Create Nginx web01 Instance
      ec2_instance:
        key_name: "{{keyout.key.name}}"
        region: "{{region}}"
        instance_type: t2.micro
        image_id: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        exact_count: 1
        security_groups: "{{BastionSG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
        tags:
          Name: web01_host
      register: web01_out

    - name: Create Tomcat app01 Instance
      ec2:
        key_name: "{{keyout.key.name}}"
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: app01_host
        exact_count: 1
        count_tag:
          Name: app01_host
        group_id: "{{BastionSG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: app01_out

    - debug:
        var: web01_out.instance_ids