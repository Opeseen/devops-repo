- name: Setup vprofile stack
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
    - name: Import VPC Setup Variables
      include_vars: vpc_variables.yml

    - name: Import VPC Stack Output Variables
      include_vars: vpc_output_vars.yml
    
    - name: Import AMI Variables
      include_vars: ami_vars.yml

    - name: Create Vprofile EC2 key
      ec2_key:
        name: sample
        region: "{{region}}"
      register: keyout

    - debug:
        var: keyout

    - name: Store Login Key For Instance
      copy:
        content: "{{keyout.key.private_key}}"
        dest: ./sample_key.pem
        mode: 0600
      when: keyout.changed

    - name: Create SG for Load balancer
      ec2_group:
        name: vproELB_SG
        description: Allow 80 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
        tags:
          Name: vproELB
      register: vproELB_out

    - name: Create SG for Instance host
      ec2_group:
        name: BastionSG
        description: Allow 22 from anywhere
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 22
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{vproELB_out.group_id}}"
            rule_desc: allow HTTP from Load balancer
        tags:
          Name: BastionSG
      register: BastionSG_out

    - name: Update SG to allow traffic from itself
      ec2_group:
        name: BastionSG
        description: Allow traffic from itself
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: false
        rules:
          - proto: all
            group_id: "{{BastionSG_out.group_id}}"
            rule_desc: Allow traffic from within

    - name: Create Tomcat app01 Instance
      ec2:
        key_name: "{{keyout.key.name}}"
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{tomcat_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: app01_host
        exact_count: 1
        count_tag:
          Name: app01_host
        group_id: "{{BastionSG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: app01_out

    - name: Create Nginx web01 Instance
      ec2:
        key_name: "{{keyout.key.name}}"
        region: "{{region}}"
        instance_type: t2.micro
        image: "{{nginx_ami}}"
        wait: yes
        wait_timeout: 300
        instance_tags:
          Name: web01_host
        exact_count: 1
        count_tag:
          Name: web01_host
        group_id: "{{BastionSG_out.group_id}}"
        vpc_subnet_id: "{{pubsub1id}}"
      register: web01_out

    - debug:
        var: web01_out.tagged_instances[0].id

    - local_action:
        module: ec2_elb_lb
        name: 'vprofile-elb'
        region: "{{region}}"
        state: present
        instance_ids:
          - "{{web01_out.tagged_instances[0].id}}"
        purge_instance_ids: true
        security_group_ids: "{{BastionSG_out.group_id}}"
        subnets:
         - "{{pubsub1id}}"
         - "{{pubsub2id}}"
         - "{{pubsub3id}}"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Hosts IP and Name in file
      blockinfile:
        path: /root/devops-repo/Ansible-Yaml/vpc/provision-stack/group_vars/hostsip
        block: |
          web01_ip: "{{web01_out.tagged_instances[0].private_ip}}"
          app01_ip: "{{app01_out.tagged_instances[0].private_ip}}"

    - name: Copy Login key to provision_stack directory
      copy:
        src: ./sample_key.pem
        dest: ~/devops-repo/Ansible-Yaml/vpc/provision-stack/sample_key.pem
        mode: '0400'
    
    - name: Insert/Update Inventory file provision-stack
      blockinfile:
        path: ~/devops-repo/Ansible-Yaml/vpc/vars/output_vars.yml
        block: |
          web01 ansibble_host=okay
          app01 ansible_host="Hello"
          cntl ansible_host=127.0.0.1 ansible_connection=local


    - name: Insert/Update Inventory file provision-stack
      blockinfile:
        path: ~/devops-repo/Ansible-Yaml/vpc/provision-stack/inventory-vpro
        block: |
          web01 ansibble_host="{{web01_out.tagged_instances[0].private_ip}}"
          app01 ansible_host="{{app01_out.tagged_instances[0].private_ip}}"
          cntl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01
          
          [appsrvgrp]
          app01

          [control]
          cntr

          [stack_inst:children]
          websrvgrp
          appsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=sample_key.pem
          #ansible_python_interpreter=/usr/bin/python3
